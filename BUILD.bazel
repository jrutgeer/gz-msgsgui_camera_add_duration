load(
    "@gz//bazel/skylark:build_defs.bzl",
    "GZ_FEATURES",
    "GZ_ROOT",
    "GZ_VISIBILITY",
    "gz_configure_header",
    "gz_export_header",
    "gz_include_header",
)
load(
    "@gz//msgs/tools:gz_msgs_generate.bzl",
    "gz_proto_library",
    "gz_proto_factory",
)

package(
    default_visibility = GZ_VISIBILITY,
    features = GZ_FEATURES,
)

licenses(["notice"])  # Apache-2.0

exports_files(["LICENSE"])

gz_configure_header(
    name = "msgs_config_hh",
    src = "core/include/gz/msgs/config.hh.in",
    cmakelists = ["CMakeLists.txt"],
    package = "msgs",
)

gz_export_header(
    name = "core/include/gz/msgs/Export.hh",
    export_base = "GZ_MSGS",
    lib_name = "gz-msgs",
    visibility = ["//visibility:private"],
)

public_headers_no_gen = glob([
    "core/include/gz/msgs/*.hh",
    "core/include/gz/msgs/convert/*.hh",
    "core/include/gz/msgs/detail/*.hh",
])

protos = glob(["proto/gz/msgs/*.proto"])

gz_include_header(
    name = "msgs_hh_genrule",
    out = "include/gz/msgs.hh",
    hdrs = public_headers_no_gen + [
        "core/include/gz/msgs/config.hh",
        "core/include/gz/msgs/Export.hh",
    ],
)

public_headers = public_headers_no_gen + [
    "core/include/gz/msgs/config.hh",
    "core/include/gz/msgs/Export.hh",
    "include/gz/msgs.hh",
]

# Custom Gazebo Protoc plugin
cc_binary(
    name = "gz_msgs_gen",
    srcs = [
        "core/generator_lite/Generator.cc",
        "core/generator_lite/Generator.hh",
        "core/generator_lite/generator_main.cc",
    ],
    deps = [
        "@com_google_protobuf//:protobuf",
        "@com_google_protobuf//:protoc_lib",
    ],
)

# Create a library of our protobuf message files
proto_library(
    name = "gzmsgs_proto",
    srcs = protos,
    strip_import_prefix = "proto",
    deps = [
        "@com_google_protobuf//:any_proto",
    ],
)

gz_proto_library(
  name = "gzmsgs_cc_proto",
  proto_deps = [":gzmsgs_proto"],
  deps = [
    "@com_google_protobuf//:protobuf",
  ]
)

gz_proto_factory(
  name = "gzmsgs_proto_factory",
  deps = [":gzmsgs_proto"],
  namespace = "gz::msgs",
  cc_output = "core/src/RegisterMsgs.cc",
  hh_output = "core/src/MessageTypes.hh"
)

cc_library(
    name = "msgs",
    srcs = [
        "core/src/Factory.cc",
        "core/src/DynamicFactory.cc",
        "core/src/DynamicFactory.hh",
        "core/src/MessageFactory.cc",
        "core/src/impl/InstallationDirectories.cc",
        "core/src/RegisterMsgs.cc"
    ],
    hdrs = public_headers,
    includes = ["core/include", "core/src"],
    deps = [
        ":gzmsgs_cc_proto",
        ":gzmsgs_proto_factory",
        GZ_ROOT + "math",
        "@com_google_protobuf//:protobuf",
        "@tinyxml2",
    ],
)

test_sources = glob(
    include = ["src/*_TEST.cc"],
    exclude = [],
)

[cc_test(
    name = src.replace("/", "_").replace(".cc", "").replace("src_", ""),
    srcs = [src],
    data = [
        "test/desc",
    ],
    defines = [
      'GZ_MSGS_TEST_PATH=\\"msgs/test\\"',
    ],
    deps = [
        ":msgs",
        GZ_ROOT + "common/testing",
        "@gtest",
        "@gtest//:gtest_main",
    ],
) for src in test_sources]


cc_test(
  name = "INTEGRATION_headers",
  srcs = ["test/integration/headers.cc"],
  deps = [
      ":gzmsgs_cc_proto",
      "@gtest",
      "@gtest//:gtest_main",
  ],
)

cc_test(
  name = "INTEGRATION_image_msg",
  srcs = ["test/integration/image_msg.cc"],
  deps = [
      ":gzmsgs_cc_proto",
      "@gtest",
      "@gtest//:gtest_main",
  ],
)

cc_test(
  name = "INTEGRATION_Utility",
  srcs = ["test/integration/Utility_TEST.cc"],
  deps = [
      ":msgs",
      GZ_ROOT + "common/testing",
      "@gtest",
      "@gtest//:gtest_main",
  ],
)

cc_test(
  name = "INTEGRATION_Factory",
  srcs = ["test/integration/Factory_TEST.cc"],
  data = ["test/desc/stringmsg.desc"],
  deps = [
      ":msgs",
      GZ_ROOT + "common/testing",
      "@gtest",
      "@gtest//:gtest_main",
  ],
  defines = [
      'GZ_MSGS_TEST_PATH=\\"msgs/test\\"',
    ],
)
